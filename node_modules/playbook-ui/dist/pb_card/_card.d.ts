import React from 'react';
import { GlobalProps } from '../utilities/globalProps';
import type { ProductColors, CategoryColors, BackgroundColors } from '../types/colors';
declare type CardPropTypes = {
    aria?: {
        [key: string]: string;
    };
    background?: BackgroundColors | ProductColors | "none";
    borderNone?: boolean;
    borderRadius?: "xs" | "sm" | "md" | "lg" | "xl" | "none" | "rounded";
    children: React.ReactChild[] | React.ReactChild | number;
    className?: string;
    data?: {
        [key: string]: string;
    };
    htmlOptions?: {
        [key: string]: string | number | boolean | (() => void);
    };
    highlight?: {
        position?: "side" | "top";
        color?: string;
    };
    length?: number;
    padding?: string;
    selected?: boolean;
    tag?: "div" | "section" | "footer" | "header" | "article" | "aside" | "main" | "nav";
} & GlobalProps;
declare type CardHeaderProps = {
    headerColor?: BackgroundColors | ProductColors | CategoryColors | "none";
    headerColorStriped?: boolean;
    children: React.ReactChild[] | React.ReactChild;
    className?: string;
    padding?: string;
} & GlobalProps;
declare type CardBodyProps = {
    children: React.ReactChild[] | React.ReactChild | string;
    className?: string;
    padding?: string;
} & GlobalProps;
declare const Card: {
    (props: CardPropTypes): React.ReactElement;
    Header: (props: CardHeaderProps) => JSX.Element;
    Body: (props: CardBodyProps) => JSX.Element;
};
export default Card;
