import React from 'react';
declare type LayoutPropTypes = {
    aria?: {
        [key: string]: string;
    };
    children?: React.ReactChild[] | React.ReactChild;
    className?: string;
    collapse?: "xs" | "sm" | "md" | "lg" | "xl";
    dark?: boolean;
    data?: Record<string, unknown>;
    full?: boolean;
    htmlOptions?: {
        [key: string]: string | number | boolean | (() => void);
    };
    position?: "left" | "right";
    responsive?: boolean;
    size?: "xs" | "sm" | "md" | "base" | "lg" | "xl";
    variant?: "light" | "dark" | "gradient";
    transparent?: boolean;
    layout?: "sidebar" | "collection" | "kanban" | "content" | "masonry";
};
declare type LayoutSideProps = {
    children: React.ReactNode[] | React.ReactNode;
    className?: string;
};
declare type LayoutBodyProps = {
    children: React.ReactNode[] | React.ReactNode;
    className?: string;
};
declare type LayoutItemProps = {
    children: React.ReactNode[] | React.ReactNode;
    className?: string;
    size?: "sm" | "md" | "lg";
};
declare type LayoutHeaderProps = {
    children: React.ReactNode[] | React.ReactNode;
    className?: string;
};
declare type LayoutFooterProps = {
    children: React.ReactNode[] | React.ReactNode;
    className?: string;
};
declare const Layout: {
    (props: LayoutPropTypes): JSX.Element;
    Side: (props: LayoutSideProps) => JSX.Element;
    Body: (props: LayoutBodyProps) => JSX.Element;
    Item: (props: LayoutItemProps) => JSX.Element;
    Header: (props: LayoutHeaderProps) => JSX.Element;
    Footer: (props: LayoutFooterProps) => JSX.Element;
};
export default Layout;
