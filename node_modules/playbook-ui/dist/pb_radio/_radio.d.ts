import React from 'react';
declare const _default: React.ForwardRefExoticComponent<(Pick<{
    aria?: {
        [key: string]: string;
    };
    alignment?: string;
    checked?: boolean;
    children?: React.ReactChild | React.ReactChild[];
    className?: string;
    dark?: boolean;
    data?: {
        [key: string]: string;
    };
    error?: boolean;
    htmlOptions?: {
        [key: string]: string | number | boolean | (() => void);
    };
    id?: string;
    label: string;
    name?: string;
    value?: string;
    text?: string;
    onChange: (event: React.FormEvent<HTMLInputElement>) => void;
} & {
    alignContent?: never;
} & {
    alignItems?: "stretch" | ("center" | "start" | "end") | "baseline" | "flexStart" | "flexEnd";
} & {
    alignSelf?: never;
} & {
    borderRadius?: "md" | "lg" | "sm" | "xl" | "xs" | "none" | "rounded";
} & {
    cursor?: "none" | "progress" | "text" | "auto" | "default" | "pointer" | "alias" | "cell" | "copy" | "crosshair" | "grab" | "grabbing" | "help" | "move" | "wait" | "contextMenu" | "verticalText" | "noDrop" | "notAllowed" | "eResize" | "nResize" | "neResize" | "nwResize" | "sResize" | "seResize" | "swResize" | "wResize" | "ewResize" | "nsResize" | "neswResize" | "nwseResize" | "colResize" | "rowResize" | "allScroll" | "zoomIn" | "zoomOut";
} & {
    dark?: boolean;
} & {
    display?: import("../types").DisplayType;
} & import("../types").DisplaySizes & {
    flex?: "none" | "auto" | "initial" | "1" | "2" | "3" | "4" | "0" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12";
} & {
    flexDirection?: "row" | "column" | "rowReverse" | "columnReverse";
} & {
    flexGrow?: 0 | 1;
} & {
    flexShrink?: 0 | 1;
} & {
    flexWrap?: "wrap" | "nowrap" | "wrapReverse";
} & {
    justifyContent?: never;
} & {
    justifySelf?: never;
} & {
    lineHeight?: "loosest" | "looser" | "loose" | "normal" | "tight" | "tighter" | "tightest";
} & {
    marginRight?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginLeft?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginTop?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginBottom?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginX?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginY?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    margin?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    break?: string;
    default?: string;
} & {
    maxWidth?: import("../types").Sizes;
} & {
    numberSpacing?: "tabular";
} & {
    order?: 1 | 2 | 3 | "none" | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | "first";
} & {
    overflowX?: "auto" | "scroll" | "hidden" | "visible";
    overflowY?: "auto" | "scroll" | "hidden" | "visible";
    overflow?: "auto" | "scroll" | "hidden" | "visible";
} & {
    paddingRight?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingLeft?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingTop?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingBottom?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingX?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingY?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    padding?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    break?: string;
    default?: string;
} & {
    position?: "fixed" | "relative" | "absolute" | "sticky" | "static";
} & {
    shadow?: "none" | "deep" | "deeper" | "deepest";
} & {
    textAlign?: "center" | "left" | "right" | "start" | "end" | "justify" | "justifyAll" | "matchParent";
} & {
    truncate?: 1 | 2 | 3 | "none" | 4 | 5;
} & {
    zIndex?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
} & {
    hover?: string;
} & {
    top?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
} & {
    right?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
} & {
    bottom?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
} & {
    left?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
}, string | number> | Pick<{
    aria?: {
        [key: string]: string;
    };
    alignment?: string;
    checked?: boolean;
    children?: React.ReactChild | React.ReactChild[];
    className?: string;
    dark?: boolean;
    data?: {
        [key: string]: string;
    };
    error?: boolean;
    htmlOptions?: {
        [key: string]: string | number | boolean | (() => void);
    };
    id?: string;
    label: string;
    name?: string;
    value?: string;
    text?: string;
    onChange: (event: React.FormEvent<HTMLInputElement>) => void;
} & {
    alignContent?: never;
} & {
    alignItems?: "stretch" | ("center" | "start" | "end") | "baseline" | "flexStart" | "flexEnd";
} & {
    alignSelf?: never;
} & {
    borderRadius?: "md" | "lg" | "sm" | "xl" | "xs" | "none" | "rounded";
} & {
    cursor?: "none" | "progress" | "text" | "auto" | "default" | "pointer" | "alias" | "cell" | "copy" | "crosshair" | "grab" | "grabbing" | "help" | "move" | "wait" | "contextMenu" | "verticalText" | "noDrop" | "notAllowed" | "eResize" | "nResize" | "neResize" | "nwResize" | "sResize" | "seResize" | "swResize" | "wResize" | "ewResize" | "nsResize" | "neswResize" | "nwseResize" | "colResize" | "rowResize" | "allScroll" | "zoomIn" | "zoomOut";
} & {
    dark?: boolean;
} & {
    display?: import("../types").DisplayType;
} & import("../types").DisplaySizes & {
    flex?: "none" | "auto" | "initial" | "1" | "2" | "3" | "4" | "0" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12";
} & {
    flexDirection?: "row" | "column" | "rowReverse" | "columnReverse";
} & {
    flexGrow?: 0 | 1;
} & {
    flexShrink?: 0 | 1;
} & {
    flexWrap?: "wrap" | "nowrap" | "wrapReverse";
} & {
    justifyContent?: never;
} & {
    justifySelf?: never;
} & {
    lineHeight?: "loosest" | "looser" | "loose" | "normal" | "tight" | "tighter" | "tightest";
} & {
    marginRight?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginLeft?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginTop?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginBottom?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginX?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginY?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    margin?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    break?: string;
    default?: string;
} & {
    maxWidth?: import("../types").Sizes;
} & {
    numberSpacing?: "tabular";
} & {
    order?: 1 | 2 | 3 | "none" | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | "first";
} & {
    overflowX?: "auto" | "scroll" | "hidden" | "visible";
    overflowY?: "auto" | "scroll" | "hidden" | "visible";
    overflow?: "auto" | "scroll" | "hidden" | "visible";
} & {
    paddingRight?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingLeft?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingTop?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingBottom?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingX?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingY?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    padding?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    break?: string;
    default?: string;
} & {
    position?: "fixed" | "relative" | "absolute" | "sticky" | "static";
} & {
    shadow?: "none" | "deep" | "deeper" | "deepest";
} & {
    textAlign?: "center" | "left" | "right" | "start" | "end" | "justify" | "justifyAll" | "matchParent";
} & {
    truncate?: 1 | 2 | 3 | "none" | 4 | 5;
} & {
    [key: string]: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
} & {
    hover?: string;
} & {
    top?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
} & {
    right?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
} & {
    bottom?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
} & {
    left?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
}, string | number> | Pick<{
    aria?: {
        [key: string]: string;
    };
    alignment?: string;
    checked?: boolean;
    children?: React.ReactChild | React.ReactChild[];
    className?: string;
    dark?: boolean;
    data?: {
        [key: string]: string;
    };
    error?: boolean;
    htmlOptions?: {
        [key: string]: string | number | boolean | (() => void);
    };
    id?: string;
    label: string;
    name?: string;
    value?: string;
    text?: string;
    onChange: (event: React.FormEvent<HTMLInputElement>) => void;
} & {
    alignContent?: never;
} & {
    alignItems?: "stretch" | ("center" | "start" | "end") | "baseline" | "flexStart" | "flexEnd";
} & {
    alignSelf?: never;
} & {
    borderRadius?: "md" | "lg" | "sm" | "xl" | "xs" | "none" | "rounded";
} & {
    cursor?: "none" | "progress" | "text" | "auto" | "default" | "pointer" | "alias" | "cell" | "copy" | "crosshair" | "grab" | "grabbing" | "help" | "move" | "wait" | "contextMenu" | "verticalText" | "noDrop" | "notAllowed" | "eResize" | "nResize" | "neResize" | "nwResize" | "sResize" | "seResize" | "swResize" | "wResize" | "ewResize" | "nsResize" | "neswResize" | "nwseResize" | "colResize" | "rowResize" | "allScroll" | "zoomIn" | "zoomOut";
} & {
    dark?: boolean;
} & import("../types").DisplaySizes & {
    flex?: "none" | "auto" | "initial" | "1" | "2" | "3" | "4" | "0" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12";
} & {
    flexDirection?: "row" | "column" | "rowReverse" | "columnReverse";
} & {
    flexGrow?: 0 | 1;
} & {
    flexShrink?: 0 | 1;
} & {
    flexWrap?: "wrap" | "nowrap" | "wrapReverse";
} & {
    justifyContent?: never;
} & {
    justifySelf?: never;
} & {
    lineHeight?: "loosest" | "looser" | "loose" | "normal" | "tight" | "tighter" | "tightest";
} & {
    marginRight?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginLeft?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginTop?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginBottom?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginX?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginY?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    margin?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    break?: string;
    default?: string;
} & {
    maxWidth?: import("../types").Sizes;
} & {
    numberSpacing?: "tabular";
} & {
    order?: 1 | 2 | 3 | "none" | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | "first";
} & {
    overflowX?: "auto" | "scroll" | "hidden" | "visible";
    overflowY?: "auto" | "scroll" | "hidden" | "visible";
    overflow?: "auto" | "scroll" | "hidden" | "visible";
} & {
    paddingRight?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingLeft?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingTop?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingBottom?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingX?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingY?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    padding?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    break?: string;
    default?: string;
} & {
    position?: "fixed" | "relative" | "absolute" | "sticky" | "static";
} & {
    shadow?: "none" | "deep" | "deeper" | "deepest";
} & {
    textAlign?: "center" | "left" | "right" | "start" | "end" | "justify" | "justifyAll" | "matchParent";
} & {
    truncate?: 1 | 2 | 3 | "none" | 4 | 5;
} & {
    zIndex?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
} & {
    hover?: string;
} & {
    top?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
} & {
    right?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
} & {
    bottom?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
} & {
    left?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
}, string | number> | Pick<{
    aria?: {
        [key: string]: string;
    };
    alignment?: string;
    checked?: boolean;
    children?: React.ReactChild | React.ReactChild[];
    className?: string;
    dark?: boolean;
    data?: {
        [key: string]: string;
    };
    error?: boolean;
    htmlOptions?: {
        [key: string]: string | number | boolean | (() => void);
    };
    id?: string;
    label: string;
    name?: string;
    value?: string;
    text?: string;
    onChange: (event: React.FormEvent<HTMLInputElement>) => void;
} & {
    alignContent?: never;
} & {
    alignItems?: "stretch" | ("center" | "start" | "end") | "baseline" | "flexStart" | "flexEnd";
} & {
    alignSelf?: never;
} & {
    borderRadius?: "md" | "lg" | "sm" | "xl" | "xs" | "none" | "rounded";
} & {
    cursor?: "none" | "progress" | "text" | "auto" | "default" | "pointer" | "alias" | "cell" | "copy" | "crosshair" | "grab" | "grabbing" | "help" | "move" | "wait" | "contextMenu" | "verticalText" | "noDrop" | "notAllowed" | "eResize" | "nResize" | "neResize" | "nwResize" | "sResize" | "seResize" | "swResize" | "wResize" | "ewResize" | "nsResize" | "neswResize" | "nwseResize" | "colResize" | "rowResize" | "allScroll" | "zoomIn" | "zoomOut";
} & {
    dark?: boolean;
} & import("../types").DisplaySizes & {
    flex?: "none" | "auto" | "initial" | "1" | "2" | "3" | "4" | "0" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12";
} & {
    flexDirection?: "row" | "column" | "rowReverse" | "columnReverse";
} & {
    flexGrow?: 0 | 1;
} & {
    flexShrink?: 0 | 1;
} & {
    flexWrap?: "wrap" | "nowrap" | "wrapReverse";
} & {
    justifyContent?: never;
} & {
    justifySelf?: never;
} & {
    lineHeight?: "loosest" | "looser" | "loose" | "normal" | "tight" | "tighter" | "tightest";
} & {
    marginRight?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginLeft?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginTop?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginBottom?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginX?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    marginY?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    margin?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    break?: string;
    default?: string;
} & {
    maxWidth?: import("../types").Sizes;
} & {
    numberSpacing?: "tabular";
} & {
    order?: 1 | 2 | 3 | "none" | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | "first";
} & {
    overflowX?: "auto" | "scroll" | "hidden" | "visible";
    overflowY?: "auto" | "scroll" | "hidden" | "visible";
    overflow?: "auto" | "scroll" | "hidden" | "visible";
} & {
    paddingRight?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingLeft?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingTop?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingBottom?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingX?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    paddingY?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    padding?: "none" | "auto" | "initial" | "inherit" | import("../types").Sizes;
    break?: string;
    default?: string;
} & {
    position?: "fixed" | "relative" | "absolute" | "sticky" | "static";
} & {
    shadow?: "none" | "deep" | "deeper" | "deepest";
} & {
    textAlign?: "center" | "left" | "right" | "start" | "end" | "justify" | "justifyAll" | "matchParent";
} & {
    truncate?: 1 | 2 | 3 | "none" | 4 | 5;
} & {
    [key: string]: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
} & {
    hover?: string;
} & {
    top?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
} & {
    right?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
} & {
    bottom?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
} & {
    left?: import("../types").Sizes | {
        value: string;
        inset: boolean;
    };
}, string | number>) & React.RefAttributes<unknown>>;
export default _default;
