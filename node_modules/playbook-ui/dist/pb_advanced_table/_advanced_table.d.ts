import React from "react";
import { GenericObject } from "../types";
import { Row } from "@tanstack/react-table";
import { GlobalProps } from "../utilities/globalProps";
declare type AdvancedTableProps = {
    aria?: {
        [key: string]: string;
    };
    children?: React.ReactNode | React.ReactNode[];
    className?: string;
    columnDefinitions: GenericObject[];
    dark?: boolean;
    data?: {
        [key: string]: string;
    };
    enableToggleExpansion?: "all" | "header" | "none";
    expandedControl?: GenericObject;
    htmlOptions?: {
        [key: string]: string | number | boolean | (() => void);
    };
    id?: string;
    initialLoadingRowsCount?: number;
    inlineRowLoading?: boolean;
    loading?: boolean | string;
    onRowToggleClick?: (arg: Row<GenericObject>) => void;
    onToggleExpansionClick?: (arg: Row<GenericObject>) => void;
    sortControl?: GenericObject;
    tableData: GenericObject[];
    tableOptions?: GenericObject;
    tableProps?: GenericObject;
    toggleExpansionIcon?: string | string[];
} & GlobalProps;
declare const AdvancedTable: {
    (props: AdvancedTableProps): JSX.Element;
    Header: ({ children, className, dark, enableSorting, id, sortIcon, ...props }: {
        children?: React.ReactNode | React.ReactNode[];
        className?: string;
        dark?: boolean;
        enableSorting?: boolean;
        id?: string;
        sortIcon?: string | string[];
    }) => JSX.Element;
    Body: ({ className, collapsibleTrail, dark, id, subRowHeaders, ...props }: {
        className?: string;
        collapsibleTrail?: boolean;
        dark?: boolean;
        id?: string;
        subRowHeaders?: string[];
    }) => JSX.Element;
};
export default AdvancedTable;
