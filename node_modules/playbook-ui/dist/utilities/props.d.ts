/**
 * Represent a "No-Operation" function that can be used as a sensible
 * default to event handlers in the absence of a value.
 *
 * @returns {() => {}} the noop function.
 */
export declare const noop: () => void;
/**
 * Maps a given aria object into HTML valid aria attribtues and their values.
 *
 * @param {Object} aria the object containing the aria prop values.
 * @returns {Object} an object holding the HTML valid aria props and their values.
 */
export declare const buildAriaProps: (aria: {
    [key: string]: string;
}) => {
    [key: string]: string;
};
/**
 * Maps a given data object into HTML valid data attribtues and their values.
 *
 * @param {Object} data the object containing the data prop values.
 * @returns {Object} an object holding the HTML valid data props and their values.
 */
export declare const buildDataProps: (data: {
    [key: string]: any;
}) => {
    [key: string]: any;
};
/**
 * Builds a Playbook valid root className off of the incoming css rules.
 *
 * @param {Object} rules a 'classnames' compliant rules object, used to derive the root className.
 * @returns {String} the derived root className value.
 */
export declare const buildCss: (...rules: (string | {
    [x: string]: string | boolean;
})[]) => string;
/**
 * Maps a given data object into HTML valid attributes and their values.
 * This is a more general version of what buildAriaProps and buildDataProps do.
 * It is used to map any arbitrary prop into a valid HTML attribute.
 *
 * @returns {Object} an object holding the HTML valid props and their values.
 */
export declare const buildHtmlProps: (htmlOptions: {
    [key: string]: string | number | boolean | (() => void);
}) => {
    [attr: string]: string | number | boolean | (() => void);
};
