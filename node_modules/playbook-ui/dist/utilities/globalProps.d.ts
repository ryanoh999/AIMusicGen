import { Binary, Display, DisplaySizes, None, Sizes } from '../types';
declare type Alignment = "start" | "end" | "center";
declare type AlignContent = {
    alignContent?: Alignment & Space;
};
declare type AlignItems = {
    alignItems?: Alignment | ("flexStart" | "flexEnd" | "stretch" | "baseline");
};
declare type AlignSelf = {
    alignSelf?: Alignment & ("auto" | "stretch" | "baseline");
};
declare type AllSizes = None | Sizes | "auto" | "initial" | "inherit";
declare type BorderRadius = {
    borderRadius?: "none" | "xs" | "sm" | "md" | "lg" | "xl" | "rounded";
};
declare type Cursor = {
    cursor?: "auto" | "default" | "none" | "contextMenu" | "help" | "pointer" | "progress" | "wait" | "cell" | "crosshair" | "text" | "verticalText" | "alias" | "copy" | "move" | "noDrop" | "notAllowed" | "grab" | "grabbing" | "eResize" | "nResize" | "neResize" | "nwResize" | "sResize" | "seResize" | "swResize" | "wResize" | "ewResize" | "nsResize" | "neswResize" | "nwseResize" | "colResize" | "rowResize" | "allScroll" | "zoomIn" | "zoomOut";
};
declare type Dark = {
    dark?: boolean;
};
declare type Flex = {
    flex?: "auto" | "initial" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "none";
};
declare type FlexDirection = {
    flexDirection?: "row" | "column" | "rowReverse" | "columnReverse";
};
declare type FlexGrow = {
    flexGrow?: Binary;
};
declare type FlexShrink = {
    flexShrink?: Binary;
};
declare type FlexWrap = {
    flexWrap?: "wrap" | "nowrap" | "wrapReverse";
};
declare type JustifyContent = {
    justifyContent?: Alignment & Space;
};
declare type JustifySelf = {
    justifySelf?: Alignment & ("auto" | "stretch");
};
declare type LineHeight = {
    lineHeight?: "loosest" | "looser" | "loose" | "normal" | "tight" | "tighter" | "tightest";
};
declare type Margin = {
    marginRight?: AllSizes;
    marginLeft?: AllSizes;
    marginTop?: AllSizes;
    marginBottom?: AllSizes;
    marginX?: AllSizes;
    marginY?: AllSizes;
    margin?: AllSizes;
    break?: string;
    default?: string;
};
declare type MaxWidth = {
    maxWidth?: Sizes;
};
declare type NumberSpacing = {
    numberSpacing?: "tabular";
};
declare type Order = {
    order?: None | "first" | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
};
declare type Padding = {
    paddingRight?: AllSizes;
    paddingLeft?: AllSizes;
    paddingTop?: AllSizes;
    paddingBottom?: AllSizes;
    paddingX?: AllSizes;
    paddingY?: AllSizes;
    padding?: AllSizes;
    break?: string;
    default?: string;
};
declare type Position = {
    position?: "relative" | "absolute" | "fixed" | "sticky" | "static";
};
declare type Top = {
    top?: Sizes | {
        value: string;
        inset: boolean;
    };
};
declare type Right = {
    right?: Sizes | {
        value: string;
        inset: boolean;
    };
};
declare type Bottom = {
    bottom?: Sizes | {
        value: string;
        inset: boolean;
    };
};
declare type Left = {
    left?: Sizes | {
        value: string;
        inset: boolean;
    };
};
declare type Shadow = {
    shadow?: "none" | "deep" | "deeper" | "deepest";
};
declare type Space = "spaceBetween" | "spaceAround" | "spaceEvenly";
declare type TextAlign = {
    textAlign?: "start" | "end" | "left" | "right" | "center" | "justify" | "justifyAll" | "matchParent";
};
declare type OverflowTypes = "scroll" | "visible" | "hidden" | "auto";
declare type Overflow = {
    overflowX?: OverflowTypes;
    overflowY?: OverflowTypes;
    overflow?: OverflowTypes;
};
declare type TruncateType = None | 1 | 2 | 3 | 4 | 5;
declare type Truncate = {
    truncate?: TruncateType;
};
declare type ZIndexType = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
declare type ZIndexResponsiveType = {
    [key: string]: ZIndexType;
};
declare type ZIndex = {
    zIndex?: ZIndexType;
} | ZIndexResponsiveType;
export declare type GlobalProps = AlignContent & AlignItems & AlignSelf & BorderRadius & Cursor & Dark & Display & DisplaySizes & Flex & FlexDirection & FlexGrow & FlexShrink & FlexWrap & JustifyContent & JustifySelf & LineHeight & Margin & MaxWidth & NumberSpacing & Order & Overflow & Padding & Position & Shadow & TextAlign & Truncate & ZIndex & {
    hover?: string;
} & Top & Right & Bottom & Left;
declare type DefaultProps = {
    [key: string]: string;
} | Record<string, unknown>;
export declare const globalProps: (props: GlobalProps, defaultProps?: DefaultProps) => string;
export declare const deprecatedProps: () => void;
export declare const domSafeProps: (props: {
    [key: string]: string;
}) => {
    [key: string]: string;
};
export {};
